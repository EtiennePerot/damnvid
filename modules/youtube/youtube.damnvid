#~DamnVid-module:youtube

class DamnModule_YouTube(DamnVideoModule):
	def __init__(self,uri,parent=None):
		DamnVideoModule.__init__(self,uri)
		self.name='youtube'
		self.regex={
			'url':re.compile('^https?://(?:[-_\w]+\.)*youtube\.\w+.*(?:v|(?:video_)?id)[/=]([-_\w]{6,})',re.IGNORECASE),
			'playlist':re.compile('^https?://(?:[-_\w]+\.)*youtube\.\w+.*p(?:lay_?list)?[/=]([-_\w]{6,})',re.IGNORECASE),
			'title':(re.compile('(?:^|&)title=([^&]+)',re.IGNORECASE),re.compile('<title>\s*YouTube\s*-*\s*([^<>]+?)\s*</title>', re.IGNORECASE),self.regex['title']),
			'ticket':(re.compile('(?:^|&)token=([^&]+)',re.IGNORECASE),re.compile('(?:^|&)fmt_stream_map=([^&]+)',re.IGNORECASE))
		}
		self.hd=None
		self.playlist=False
		self.valid=self.regex['url'].search(uri)
		if self.valid:
			self.id='yt:'+self.valid.group(1)
			self.link='http://www.youtube.com/watch?v='+self.valid.group(1)
		else:
			self.valid=self.regex['playlist'].search(uri)
			if self.valid:
				self.id='yp:'+self.valid.group(1)
				self.playlist=True
				self.link='http://www.youtube.com/view_play_list?p='+self.id[3:]
	def getTitle(self):
		if self.playlist:
			return None
		if self.title is None:
			html=DamnURLGetAll(self.link, onerror='')
			res=self.regex['title'][1].search(html)
			gottitle = False
			if res:
				self.title=DamnUnicode(DamnHtmlEntities(res.group(1)))
				gottitle = True
			else:
				res=self.regex['title'][2].search(html)
				if res:
					self.title=DamnUnicode(DamnHtmlEntities(res.group(1)))
					gottitle = True
			self.YouTube_GetTicket(html)
			if not gottitle:
				html=DamnURLGetAll('http://www.youtube.com/get_video_info?video_id='+self.id[3:], onerror='')
				gottitle = False
				res=self.regex['title'][0].search(html)
				if res:
					try:
						self.title=DamnUnicode(urllib2.unquote(res.group(1).replace('+','%20')))
					except:
						pass # Happens with unicode errors and stuff
				self.YouTube_GetTicket(html)
		return DamnVideoModule.getTitle(self)
	def YouTube_GetTicket(self, html):
		print 'Passthrough', html[:128]
		res2=self.regex['ticket'][0].search(html)
		if res2:
			print 'res2 match'
			self.newTicket(res2.group(1)) # res2.group(1) should be urllib2.unquote()'d, but since we're going to put it back into URLs we don't need to decode it.
			if self.hd is None:
				url=DamnURLPicker(['http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+res2.group(1)+'&fmt=22', 'http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+res2.group(1)+'&fmt=18', 'http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+res2.group(1)],True)
				if url=='http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+res2.group(1)+'&fmt=22':
					if DamnURLOpen('http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+res2.group(1)+'&fmt=37') is None:
						self.hd = '720'
					else:
						self.hd = '1080'
				else:
					self.hd = False
		else:
			res2=self.regex['ticket'][1].search(html)
			if res2:
				print 'res2 match 2'
				formats = DamnUnicode(urllib2.unquote(res2.group(1))).split(u',')
				print 'Formats are', formats
				qualitys = {}
				directUrls = []
				for i in formats:
					i = i.split(u'|')
					if len(i) < 2:
						print 'i is not 2:', i
						continue
					qualitys[i[1]] = i[0]
					directUrls.append(i[1])
				print 'directURLS are now', directUrls
				if self.hd is None:
					url = DamnURLPicker(directUrls, True)
					if url in qualitys:
						try:
							qualitys[url] = int(qualitys[url])
							if qualitys[url] > 36:
								self.hd = '1080'
							elif qualitys[url] == 22:
								self.hd = '720'
						except:
							pass
					if self.hd is None:
						self.hd = False
				print 'directURLs', directUrls
				self.newTicket(directUrls)
	def getProfile(self):
		if self.playlist:
			return None
		if self.hd:
			return self.pref('profilehd'+self.hd)
		return self.pref('profile')
	def getOutdir(self):
		if self.playlist:
			return None
		if self.hd:
			return self.pref('outdirhd'+self.hd)
		return self.pref('outdir')
	def getIcon(self):
		if self.playlist:
			return None
		if self.hd:
			return 'youtubehd'
		return 'youtube'
	def renewTicket(self):
		if self.playlist:
			return None
		if self.ticket is None or self.ticketdate+15<time.time():
			self.YouTube_GetTicket(DamnURLGetAll('http://www.youtube.com/get_video_info?video_id='+self.id[3:], onerror=''))
			if self.ticket is None or self.ticketdate+15<time.time():
				self.YouTube_GetTicket(DamnURLGetAll(self.link, onerror=''))
	def getDownload(self):
		if self.playlist:
			return None
		self.renewTicket()
		if type(self.ticket) is type([]):
			Damnlog('Returning', self.ticket)
			return self.ticket
		if self.hd == '720':
			return 'http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+self.ticket+'&fmt=22'
		elif self.hd == '1080':
			return 'http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+self.ticket+'&fmt=37'
		return DamnURLPicker(['http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+self.ticket+'&fmt=18','http://www.youtube.com/get_video?video_id='+self.id[3:]+'&t='+self.ticket],True)
	def addVid(self,parent):
		if not self.playlist:
			return DamnVideoModule.addVid(self,parent)
		playlist=DV.youtube_service.GetYouTubeVideoFeed('http://gdata.youtube.com/feeds/api/playlists/'+self.id[3:]+'?v=2&max-results='+str(self.pref('maxplaylist')))
		for i in playlist.entry:
			try:
				DamnModule_YouTube(i.media.player.url).addVid(parent)
			except:
				pass # Might fail for a number of reasons (private video, video is down, etc)
DamnRegisterModule({
	'name':'youtube',
	'title':'YouTube',
	'type':'video',
	'version':'1.8',
	'minversion':'1.7',
	'author':{
		'name':'Etienne Perot',
		'email':'admin@biringa.com',
		'url':'http://biringa.com/'
	},
	'icon':{
		'small':'youtube.png',
		'large':'youtube-large.png',
	},
	'about':{
		'short':'DamnVid module for YouTube, YouTube HD, and YouTube playlists.',
		'long':"""This is a video plugin for DamnVid that adds YouTube video downloading capabilities.
YouTube HD (720p/1080p) is also supported, as well as playlist batch downloading.""",
		'url':'http://code.google.com/p/damnvid/wiki/Modules'
	},
	'sites':[
		{
			'title':'YouTube',
			'icon':'youtube.png',
			'url':'http://www.youtube.com/browse'
		},
		{
			'title':'YouTube HD',
			'icon':'youtubehd.png',
			'url':'http://www.youtube.com/browse?s=mphd'
		}
	],
	'class':DamnModule_YouTube,
	'preferences':{
		'profile':{
			'name':'Default profile',
			'type':DV.preference_type_profile,
			'kind':'profile',
			'strict':True,
			'default':-1
		},
		'profilehd720':{
			'name':'Default profile for 720p videos',
			'type':DV.preference_type_profile,
			'kind':'profile',
			'strict':True,
			'default':-1
		},
		'profilehd1080':{
			'name':'Default profile for 1080p videos',
			'type':DV.preference_type_profile,
			'kind':'profile',
			'strict':True,
			'default':-1
		},
		'outdir':{
			'name':'Output directory',
			'type':DV.preference_type_misc,
			'kind':'dir',
			'strict':True,
			'default':'?DAMNVID_MY_VIDEOS?/DamnVid/'
		},
		'outdirhd720':{
			'name':'Output directory for 720p videos',
			'type':DV.preference_type_misc,
			'kind':'dir',
			'strict':True,
			'default':'?DAMNVID_MY_VIDEOS?/DamnVid/'
		},
		'outdirhd1080':{
			'name':'Output directory for 1080p videos',
			'type':DV.preference_type_misc,
			'kind':'dir',
			'strict':True,
			'default':'?DAMNVID_MY_VIDEOS?/DamnVid/'
		},
		'maxplaylist':{
			'name':'Maximum videos from playlists',
			'type':DV.preference_type_misc,
			'kind':'int:1-50',
			'strict':True,
			'default':'50'
		}
	},
	'preferences_order':['profile','outdir','profilehd720','outdirhd720','profilehd1080','outdirhd1080','maxplaylist'],
	'register':{
		'listicons':{
			'youtube':'youtube.png',
			'youtubehd':'youtubehd.png'
		}
	}
})
